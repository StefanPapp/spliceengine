// Launch the docker container
node('splice-standalone') {

    try {

    notifyBuild('STARTED')

    stage('Prep') {
      // Checkout code from repository
      checkout([  
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine-ee.git']]
        ])
        checkout([  
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/DB-9162']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine.git']]
        ])  
      }

    stage('Build') {
      dir('spliceengine'){
          def platforms = ""
          def branch = "git rev-parse --abbrev-ref HEAD |  tr -d '\n'| tail -c 2"

          if ( "$branch" == ".7" ) {
                        platforms = "cdh5.14.0"
                        branch = "branch-2.7"
                    } else if ( "$branch" == ".8" ) {
                        platforms = "cdh5.14.0"
                        branch = "branch-2.8"
                    } else if ( "$branch" == ".0" ) {
                        platforms = "cdh6.3.0"
                        branch = "branch-3.0"
                    } else {
                        platforms = "cdh5.14.0"
                        branch = "master"
            }

          def errors = sh "./pipelines/spot-bugs/runSpotbugs.sh $platforms $branch"
          if ( errors > 0 ){
            currentBuild.result = "FAILED"
            }
          }
      }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // Build status of null means successful.
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    // Override default values based on build status.
    if (buildStatus == 'STARTED' || buildStatus == 'INPUT') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'CREATING' || buildStatus == 'DESTROYING'){
        color = 'BLUE'
        colorCode = '#0000FF'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else if (buildStatus == 'FAILED'){
        color = 'RED'
        colorCode = '#FF0000'
    } else {
        echo "End of pipeline"
    }
}