def BUILD_PROPS = "/opt/splice-build.properties"
def JDK_PROPS = "/opt/jdk8.properties"
def BUILD_ENV = "buildEnv"
def JDK8_ENV = "jdk8Env"

void prop2env(propFile, envFile) {
    sh "sed -e 's: = :=:;s:\\(=\\)\\(.*\\):\\1\"\\2\":' ${propFile} | tee ${envFile}"
}

// Launch the docker container
node('agent') {

    try {

    notifyBuild('STARTED')

    stage('Prep') {
      // Checkout code from repository
      checkout([  
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: '39ceb99f-365d-462f-a37b-c41f4fe1fcfa', url: 'git@github.com:splicemachine/spliceengine-ee.git']]
        ])
        checkout([  
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/DB-9162']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: '39ceb99f-365d-462f-a37b-c41f4fe1fcfa', url: 'git@github.com:splicemachine/spliceengine.git']]
        ])
      }

    stage('Build') {
      dir('spliceengine'){
          def platforms = ""
          def branch = "git rev-parse --abbrev-ref HEAD |  tr -d '\n'| tail -c 2"

          prop2env(BUILD_PROPS, BUILD_ENV)
          prop2env(JDK_PROPS, JDK8_ENV)
          sh '''
          source buildEnv
          source jdk8Env
          export $(cut -d= -f1 buildEnv)
          export $(cut -d= -f1 jdk8Env)
          '''
          env.JAVA_HOME="/opt/java/jdk8"
          env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
          sh 'java -version'

          if ( "$branch" == ".7" ) {
                        platforms = "cdh5.14.0"
                        branch = "branch-2.7"
                    } else if ( "$branch" == ".8" ) {
                        platforms = "cdh5.14.0"
                        branch = "branch-2.8"
                    } else if ( "$branch" == ".0" ) {
                        platforms = "cdh6.3.0"
                        branch = "branch-3.0"
                    } else {
                        platforms = "cdh5.14.0"
                        branch = "master"
            }

          def errors = sh "./pipelines/spot-bugs/runSpotbugs.sh $platforms $branch"
          }
      }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // Build status of null means successful.
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    // Override default values based on build status.
    if (buildStatus == 'STARTED' || buildStatus == 'INPUT') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'CREATING' || buildStatus == 'DESTROYING'){
        color = 'BLUE'
        colorCode = '#0000FF'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else if (buildStatus == 'FAILED'){
        color = 'RED'
        colorCode = '#FF0000'
    } else {
        echo "End of pipeline"
    }
}